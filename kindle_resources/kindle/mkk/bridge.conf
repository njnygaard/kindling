#kate: syntax bash;
description "Bridge companion"
version "$Id: bridge.conf 17398 2020-05-24 03:39:18Z NiLuJe $"


# The updated framework job is the root of our problems, so start well after it ;).
start on framework_ready
stop on stopping framework

export LANG LC_ALL

pre-start script
	[ -f "/etc/upstart/functions" ] && source /etc/upstart/functions

	BRJOB_REV="$( echo '$Revision: 17398 $' | cut -d ' ' -f 2 )"
	f_log I bridge start "" "hello there! (r${BRJOB_REV})"

	BRIDGE_EMERGENCY="/mnt/us/emergency.sh"

	# First things first, check for an emergency script
	if [ -f "${BRIDGE_EMERGENCY}" ] ; then
		# We got one, make it executable and use it
		[ -x "${BRIDGE_EMERGENCY}" ] || chmod +x "${BRIDGE_EMERGENCY}"
		# Run it...
		f_log I bridge start "" "starting bridge emergency script"
		/bin/sh "${BRIDGE_EMERGENCY}"
		# And GET OUT! NOW!
		return 0
	fi

	make_mutable() {
		local my_path="${1}"
		# NOTE: Can't do that on symlinks, hence the hoop-jumping...
		if [ -d "${my_path}" ] ; then
			find "${my_path}" -type d -exec chattr -i '{}' \;
			find "${my_path}" -type f -exec chattr -i '{}' \;
		elif [ -f "${my_path}" ] ; then
			chattr -i "${my_path}"
		fi
	}

	make_immutable() {
		local my_path="${1}"
		if [ -d "${my_path}" ] ; then
			find "${my_path}" -type d -exec chattr +i '{}' \;
			find "${my_path}" -type f -exec chattr +i '{}' \;
		elif [ -f "${my_path}" ] ; then
			chattr +i "${my_path}"
		fi
	}

	# Barring that, let's fix our stuff up...
	MKK_PERSISTENT_STORAGE="/var/local/mkk"
	RP_PERSISTENT_STORAGE="/var/local/rp"
	MKK_BACKUP_STORAGE="/mnt/us/mkk"
	RP_BACKUP_STORAGE="/mnt/us/rp"
	LINKFONTS_LOCAL_BASEDIR="/var/local/linkfonts"
	BRIDGE_SCRIPT="/var/local/system/fixup"
	BRIDGE_ALT_SCRIPT="/var/local/system/onetimefixup"

	# Has varlocal been wiped? Fix it!
	if [ ! -d "${MKK_PERSISTENT_STORAGE}" ] || [ ! -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" ] ; then
		if [ -d "${MKK_BACKUP_STORAGE}" ] ; then
			f_log I bridge start "" "restoring mkk from backups"
			make_mutable "${MKK_PERSISTENT_STORAGE}"
			rm -rf "${MKK_PERSISTENT_STORAGE}"
			mkdir -p "${MKK_PERSISTENT_STORAGE}"
			chown root:root "${MKK_PERSISTENT_STORAGE}"
			chmod g-s "${MKK_PERSISTENT_STORAGE}"
			cp -af "${MKK_BACKUP_STORAGE}/." "${MKK_PERSISTENT_STORAGE}/."
			make_immutable "${MKK_PERSISTENT_STORAGE}"
		fi
	fi
	if [ ! -d "${RP_PERSISTENT_STORAGE}" ] || [ ! -f "${RP_PERSISTENT_STORAGE}/debrick" ] ; then
		if [ -d "${RP_BACKUP_STORAGE}" ] ; then
			f_log I bridge start "" "restoring rp from backups"
			make_mutable "${RP_PERSISTENT_STORAGE}"
			rm -rf "${RP_PERSISTENT_STORAGE}"
			mkdir -p "${RP_PERSISTENT_STORAGE}"
			chown root:root "${RP_PERSISTENT_STORAGE}"
			chmod g-s "${RP_PERSISTENT_STORAGE}"
			cp -af "${RP_BACKUP_STORAGE}/." "${RP_PERSISTENT_STORAGE}/."
			make_immutable "${RP_PERSISTENT_STORAGE}"
		fi
	fi

	# Permissions fixups...
	for my_path in "${MKK_PERSISTENT_STORAGE}" "${RP_PERSISTENT_STORAGE}" "${LINKFONTS_LOCAL_BASEDIR}" "${LINKFONTS_LOCAL_BASEDIR}/lib" ; do
		if [ -d "${my_path}" ] ; then
			# Not ours? Fix it!
			if [ ! -O "${my_path}" ] || [ ! -G "${my_path}" ] ; then
				# NOTE: Can't make linkfont's stuff immutable!
				if [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}" ] && [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}/lib" ] ; then
					# Which means we silence that log message for linkfonts stuff, because it'll need to be done on every boot.
					f_log I bridge start "" "fixing ownership of ${my_path}"
					make_mutable "${my_path}"
				fi
				chown -R root:root "${my_path}"
				if [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}" ] && [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}/lib" ] ; then
					make_immutable "${my_path}"
				fi
			fi
			# Has a crappy setgid bit set? Kill it!
			if [ -g "${my_path}" ] ; then
				if [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}" ] && [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}/lib" ] ; then
					f_log I bridge start "" "clearing setgid bit on ${my_path}"
					make_mutable "${my_path}"
				fi
				chmod g-s "${my_path}"
				if [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}" ] && [ "${my_path}" != "${LINKFONTS_LOCAL_BASEDIR}/lib" ] ; then
					make_immutable "${my_path}"
				fi
			fi
		fi
	done

	# Make Gandalf all-powerful again!
	if [ -f "${MKK_PERSISTENT_STORAGE}/gandalf" ] ; then
		if [ ! -O "${MKK_PERSISTENT_STORAGE}/gandalf" ] || [ ! -G "${MKK_PERSISTENT_STORAGE}/gandalf" ] ; then
			f_log I bridge start "" "give gandalf his hat back"
			make_mutable "${MKK_PERSISTENT_STORAGE}/gandalf"
			chown root:root "${MKK_PERSISTENT_STORAGE}/gandalf"
			make_immutable "${MKK_PERSISTENT_STORAGE}/gandalf"
		fi
		if [ ! -x "${MKK_PERSISTENT_STORAGE}/gandalf" ] ; then
			f_log I bridge start "" "allow gandalf to be called on"
			make_mutable "${MKK_PERSISTENT_STORAGE}/gandalf"
			chmod a+rx "${MKK_PERSISTENT_STORAGE}/gandalf"
			make_immutable "${MKK_PERSISTENT_STORAGE}/gandalf"
		fi
		if [ ! -u "${MKK_PERSISTENT_STORAGE}/gandalf" ] ; then
			f_log I bridge start "" "making gandalf all-powerful"
			make_mutable "${MKK_PERSISTENT_STORAGE}/gandalf"
			chmod +s "${MKK_PERSISTENT_STORAGE}/gandalf"
			make_immutable "${MKK_PERSISTENT_STORAGE}/gandalf"
		fi
		if [ ! -h "${MKK_PERSISTENT_STORAGE}/su" ] ; then
			f_log I bridge start "" "putting gandalf astride shadowfax"
			make_mutable "${MKK_PERSISTENT_STORAGE}"
			ln -sf "${MKK_PERSISTENT_STORAGE}/gandalf" "${MKK_PERSISTENT_STORAGE}/su"
			make_immutable "${MKK_PERSISTENT_STORAGE}"
		fi
		# NOTE: -O / -G tests don't behave well on symlinks, so make it mandatory...
		#f_log I bridge start "" "making shadowfax shiny again"
		chown -h root:root "${MKK_PERSISTENT_STORAGE}/su"
	fi

	# And keep the bridge up!
	# NOTE: Keep it mutable to let the system free to use the fixup mechanism?
	if [ ! -f "${BRIDGE_SCRIPT}" ] ; then
		if [ -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" ] ; then
			f_log W bridge start "" "restoring the bridge"
			mkdir -p "/var/local/system"
			rm -rf "${BRIDGE_SCRIPT}"
			cp -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" "${BRIDGE_SCRIPT}"
			chown root:root "${BRIDGE_SCRIPT}"
			chmod a+rx "${BRIDGE_SCRIPT}"

			# And if it was gone, it probably means we need to run it to set everything up again ;).
			/bin/sh "${BRIDGE_SCRIPT}"
		fi
	else
		if [ ! -O "${BRIDGE_SCRIPT}" ] || [ ! -G "${BRIDGE_SCRIPT}" ] ; then
			# NOTE: The framework job stomps on /var/local permissions & ownership, so make this silent.
			#f_log I bridge start "" "fixing ownership of the bridge"
			chown root:root "${BRIDGE_SCRIPT}"
		fi
		if [ ! -x "${BRIDGE_SCRIPT}" ] ; then
			f_log I bridge start "" "open the gates of the bridge"
			chmod a+rx "${BRIDGE_SCRIPT}"
		fi
		# Warn if it's not ours...
		if ! grep -q "BRIDGE_REV" "${BRIDGE_SCRIPT}" ; then
			f_log W bridge start "" "main bridge is not ours"

			# There are more than one way to skin a cat...
			if [ ! -f "${BRIDGE_ALT_SCRIPT}" ] ; then
				if [ -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" ] ; then
					f_log W bridge start "" "restoring the alt bridge"
					mkdir -p "/var/local/system"
					rm -rf "${BRIDGE_ALT_SCRIPT}"
					cp -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" "${BRIDGE_ALT_SCRIPT}"
					chown root:root "${BRIDGE_ALT_SCRIPT}"
					chmod a+rx "${BRIDGE_ALT_SCRIPT}"

					# And if it was gone, it probably means we need to run it to set everything up again ;).
					/bin/sh "${BRIDGE_ALT_SCRIPT}"
				fi
			else
				if [ ! -O "${BRIDGE_ALT_SCRIPT}" ] || [ ! -G "${BRIDGE_ALT_SCRIPT}" ] ; then
					#f_log I bridge start "" "fixing ownership of the alt bridge"
					chown root:root "${BRIDGE_ALT_SCRIPT}"
				fi
				if [ ! -x "${BRIDGE_ALT_SCRIPT}" ] ; then
					f_log I bridge start "" "open the gates of the alt bridge"
					chmod a+rx "${BRIDGE_ALT_SCRIPT}"
				fi
				# Warn if it's not ours...
				if ! grep -q "BRIDGE_REV" "${BRIDGE_ALT_SCRIPT}" ; then
					f_log W bridge start "" "alt bridge is not ours"

					# Last ditch attempt: run it ourselves.
					if [ -f "${MKK_PERSISTENT_STORAGE}/bridge.sh" ] ; then
						f_log W bridge start "" "last stand"
						/bin/sh "${MKK_PERSISTENT_STORAGE}/bridge.sh"
					fi
				fi
			fi
		fi
	fi

	f_log I bridge start "" "so uncivilized"

	return 0
end script
